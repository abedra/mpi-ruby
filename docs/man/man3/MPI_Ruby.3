.\" DO NOT MODIFY THIS FILE! it was generated by rd2
.TH mpi.rd 1 "July 2001"
.SH MPI
.PP
.SH Description
.PP
The module containing all MPI classes and constants
.SH Methods
.PP
.SH Informational Methods
.PP

.TP
.fi
.B
MPI.wtime()
Returns a double precision floating\-point number that is the time in seconds
since some arbitrary point of time in the past.  The point is guaranteed
not to change during the lifetime of the process.

C equivalent: \&\fBMPI_Wtime()\fP


.TP
.fi
.B
MPI.wtick()
Returns a double precision floating\-point number that is the time in seconds
between successive ticks of the clock.

C equivalent: \&\fBMPI_Wtick()\fP


.TP
.fi
.B
MPI.initialized?()
Returns true if MPI has been initialized.  (Note that because of the
runtime system of MPI Ruby, this will always return true.)

C equivalent: \&\fBMPI_Initialized()\fP


.TP
.fi
.B
MPI.processor_name()
Returns the processor name of the current processor.

C equivalent: \&\fBMPI_Get_processor_name()\fP


.TP
.fi
.B
MPI.dims_create(nnodes, dims)
Returns an array containing cartesian dimensions suitable for use with
MPI::Comm#cart_create().  nnodes is an integer specifying the total
number of processes.  The array dims should have length equal to 
the desired number of dimensions and should contain integers.  If an entry
i in dims is positive, the i\-th entry in the returned
array will be precisely dims[i].  If dims[i] is 0, the
corresponding entry in the returned array will be determined by the
method.  A negative entry in dims is incorrect.

C equivalent: \&\fBMPI_Dims_create()\fP
.SH Constants
.PP
MPI::UNDEFINED
.nf
\&    An opaque value that is used by various methods to specify that a value is
\&    undefined.
.fi

